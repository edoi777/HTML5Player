// Generated by CoffeeScript 1.8.0

/*
    This class saves all the watched sections of a user.
    On flush() the History returns all watched sections (watchedRanges) and clears the list.
    It listens on all play and pause events as well as handles the last view range before closing the tab/website.
 */
window.Html5Player || (window.Html5Player = {});

window.Html5Player.History = (function() {
  function History(player) {
    this.player = player;
    this.watchedRanges = [];
    this.tmpStartTime = -1;
    if (player.mediaController) {
      $(player.mediaController).on("play", (function(_this) {
        return function() {
          return _this.handlePlay();
        };
      })(this));
      $(player.mediaController).on("pause", (function(_this) {
        return function() {
          return _this.handlePause();
        };
      })(this));
    } else {
      $(player.videoA).on("play", (function(_this) {
        return function() {
          return _this.handlePlay();
        };
      })(this));
      $(player.videoA).on("pause", (function(_this) {
        return function() {
          return _this.handlePause();
        };
      })(this));
    }
  }

  History.prototype.handlePlay = function(time) {
    if (this.player.previewShown || this.player.customPreviewIsShown) {
      this.tmpStartTime = -1;
    } else if (time) {
      this.tmpStartTime = time;
    } else {
      this.tmpStartTime = this.player.currentTime();
    }
  };

  History.prototype.handlePause = function(time) {
    var endTime;
    if (!(this.player.previewShown || this.player.customPreviewIsShown)) {
      if (time) {
        endTime = time;
      } else {
        endTime = this.player.currentTime();
      }
      if (!(this.tmpStartTime === -1 || this.tmpStartTime === endTime)) {
        return this.watchedRanges.push({
          'start': this.tmpStartTime,
          'end': endTime
        });
      }
    }
  };

  History.prototype.flush = function() {
    var returnValues;
    if (this.player.mediaController && this.player.mediaController.playbackState === "playing" && !this.player.previewShown && !this.player.customPreviewIsShown && this.tmpStartTime !== -1) {
      this.watchedRanges.push({
        'start': this.tmpStartTime,
        'end': this.player.currentTime()
      });
      this.handlePlay();
    } else if (!this.player.mediaController && !this.player.videoA.paused && !this.player.previewShown && !this.player.customPreviewIsShown && this.tmpStartTime !== -1) {
      this.watchedRanges.push({
        'start': this.tmpStartTime,
        'end': this.player.currentTime()
      });
      this.handlePlay();
    }
    returnValues = this.watchedRanges;
    this.watchedRanges = [];
    return returnValues;
  };

  return History;

})();

//# sourceMappingURL=history.js.js.map
