// Generated by CoffeeScript 1.8.0

/*
    This class handles all the actions and events for video previews.
    If one ranges end, it will jump to the next.
 */
window.Html5Player || (window.Html5Player = {});

window.Html5Player.Preview = (function() {
  function Preview(player, $baseElement, previewRanges) {
    this.player = player;
    this.$seeker = $baseElement.find('.progress');
    this.previewRanges = previewRanges;
    this.currentPreviewRangeIndex = -1;
  }

  Preview.prototype.show = function() {
    var range, _i, _len, _ref;
    if (this.player.hasCustomPreview) {
      this.player.customPreview.stop();
    }
    _ref = this.previewRanges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      range = _ref[_i];
      this.addPreviewRange(range);
    }
    this.player.previewShown = true;
    return this.start();
  };

  Preview.prototype.addPreviewRange = function(previewRange) {
    var offset, width;
    offset = (previewRange.start / this.player.videoA.duration) * 100;
    width = ((previewRange.end - previewRange.start) / this.player.videoA.duration) * 100;
    return this.$seeker.prepend($('<div class="previewRange" style="left:' + offset + '%; width:' + width + '%;"></div>'));
  };

  Preview.prototype.stop = function() {
    this.$seeker.find('.previewRange').remove();
    this.currentPreviewRangeIndex = -1;
    this.player.pause();
    return this.player.previewShown = false;
  };

  Preview.prototype.update = function() {
    if (this.player.currentTime() > this.previewRanges[this.currentPreviewRangeIndex].end) {
      return this.jumpToNextPreview();
    }
  };

  Preview.prototype.start = function() {
    this.currentPreviewRangeIndex = 0;
    this.player.gototime(this.previewRanges[this.currentPreviewRangeIndex].start);
    return this.player.play;
  };

  Preview.prototype.jumpToNextPreview = function() {
    if (this.currentPreviewRangeIndex !== this.previewRanges.length - 1) {
      this.currentPreviewRangeIndex++;
      return this.player.gototime(this.previewRanges[this.currentPreviewRangeIndex].start);
    } else {
      return this.player.controls.$previewButton.click();
    }
  };

  Preview.prototype.seekTimeInPreviewRange = function(time) {
    var i, range, _i, _len, _ref;
    _ref = this.previewRanges;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      range = _ref[i];
      if ((range.start <= time && time <= range.end)) {
        this.currentPreviewRangeIndex = i;
        return true;
      }
    }
    return false;
  };

  return Preview;

})();

//# sourceMappingURL=preview.js.js.map
