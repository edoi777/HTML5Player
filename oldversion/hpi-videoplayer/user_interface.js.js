// Generated by CoffeeScript 1.8.0

/*
    This class is in charge of the user interface. It handles:
    - resizing bar between videos
    - toggle fullscreen mode
 */
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.Html5Player || (window.Html5Player = {});

window.Html5Player.UserInterface = (function() {
  UserInterface.prototype.$videoPlayer = null;

  UserInterface.prototype.lastPageX = 0;

  UserInterface.prototype.player = null;

  UserInterface.prototype.videoA = null;

  UserInterface.prototype.videoB = null;

  UserInterface.prototype.fullscreenPlayerWidth = 0;

  UserInterface.prototype.playerWidth = 0;

  UserInterface.prototype.controlsHeight = 0;

  UserInterface.prototype.aRatio = 16 / 9;

  UserInterface.prototype.bRatio = 4 / 3;

  UserInterface.prototype.splitRatio = [0.5, 0.5];

  UserInterface.prototype.minVideoWidth = 0.2;

  function UserInterface(player, $baseElement) {
    this.fullscreenOnchange = __bind(this.fullscreenOnchange, this);
    this.player = player;
    this.videoA = $(player.videoA);
    this.videoB = $(player.videoB);
    this.isSingle = player.isSingle;
    this.$videoPlayer = $baseElement.find(".videoPlayer");
    if (device.ios()) {
      this.$videoPlayer.find('.mute').remove();
      this.$videoPlayer.find('.volumebar').remove();
      this.$videoPlayer.find('.fullscreen').css('border-right', 'none');
    }
    this.$chapterContent = $baseElement.find(".chapterContent");
    this.playerWidth = this.$videoPlayer.outerWidth();
    this.controlsHeight = this.$videoPlayer.find('.controlsContainer').outerHeight();
    this.$videoPlayer.find(".resizer").mousedown((function(_this) {
      return function(event) {
        event.preventDefault();
        _this.lastPageX = event.pageX;
        return _this.$videoPlayer.mousemove(function(event) {
          return _this.resizeVideo(event);
        });
      };
    })(this));
    $(window).mouseup((function(_this) {
      return function(event) {
        event.preventDefault();
        return _this.$videoPlayer.off('mousemove');
      };
    })(this));
    $(window).resize((function(_this) {
      return function(event) {
        return _this.resizePlayer(true);
      };
    })(this));
    $(window).load((function(_this) {
      return function(event) {
        return _this.resizePlayer(true);
      };
    })(this));
    $(document).ready((function(_this) {
      return function() {
        return _this.resizePlayer(true);
      };
    })(this));
    this.originalWidth = this.$videoPlayer.width();
    this.originalHeight = this.$videoPlayer.height();
    this.ratioA = this.videoA.width() / this.originalWidth;
    this.ratioB = this.videoB.width() / this.originalWidth;
    this.resizePlayer(true);
    this.$videoPlayer.width('100%');
  }

  UserInterface.prototype.toggleFullscreen = function() {
    var video;
    if (screenfull.isFullscreen) {
      screenfull.exit();
      return;
    }
    screenfull.onchange = this.fullscreenOnchange;
    if (screenfull.enabled) {
      return screenfull.request(this.$videoPlayer[0]);
    } else {
      video = this.$videoPlayer.find('video');
      return $(video).attr('controls', 'controls');
    }
  };

  UserInterface.prototype.fullscreenOnchange = function() {
    this.fullscreenPlayerWidth = this.playerWidth;
    this.checkFullscreenChange();
    $(window).trigger("toggleFullscreen");
    if (!(document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || (document.msFullscreenElement != null))) {
      return this.$videoPlayer.find('.fullscreen.button > i').removeClass('icon-fullscreen-off').addClass('icon-fullscreen-on');
    }
  };

  UserInterface.prototype.resizePlayer = function(byDataOnly) {
    if (this.isSingle) {
      return this.resizeSingleStreamPlayer(byDataOnly);
    } else {
      return this.resizeDualStreamPlayer(byDataOnly);
    }
  };

  UserInterface.prototype.resizeSingleStreamPlayer = function(byDataOnly) {
    var aHeight, aWidth, h, orgRatio, playerHeight;
    this.playerWidth = this.$videoPlayer.outerWidth();
    if (byDataOnly) {
      orgRatio = this.$videoPlayer.find('video').data('height') / this.$videoPlayer.find('video').data('width');
      h = this.playerWidth * orgRatio;
      this.$videoPlayer.find('.a').width(this.playerWidth);
      this.$videoPlayer.find('.a').height(h);
      playerHeight = h + this.controlsHeight;
      if (playerHeight > 0) {
        return this.$videoPlayer.height(playerHeight);
      }
    } else {
      aWidth = this.playerWidth;
      aHeight = aWidth * this.aRatio;
      playerHeight = aHeight + this.controlsHeight;
      if (aWidth > 0) {
        this.$videoPlayer.find('.a').width(aWidth);
      }
      if (aHeight > 0) {
        this.$videoPlayer.find('.a').height(aHeight);
      }
      if (playerHeight > 0) {
        return this.$videoPlayer.height(playerHeight);
      }
    }
  };

  UserInterface.prototype.resizeDualStreamPlayer = function(byDataOnly) {
    var aHeight, aRatio, aWidth, bHeight, bRatio, bWidth, playerHeight;
    if (byDataOnly) {
      this.playerWidth = this.$videoPlayer.outerWidth();
      aWidth = this.playerWidth * this.splitRatio[0];
      bWidth = this.playerWidth * this.splitRatio[1];
      aRatio = this.$videoPlayer.find('.video.a > video').data('height') / this.$videoPlayer.find('.video.a > video').data('width');
      bRatio = this.$videoPlayer.find('.video.b > video').data('height') / this.$videoPlayer.find('.video.b > video').data('width');
      aHeight = aWidth * aRatio;
      bHeight = bWidth * bRatio;
      playerHeight = Math.max(aHeight, bHeight) + this.controlsHeight;
      this.$videoPlayer.find('.a').width(aWidth);
      this.$videoPlayer.find('.a').height(aHeight);
      this.$videoPlayer.find('.b').width(bWidth);
      this.$videoPlayer.find('.b').height(bHeight);
      this.$videoPlayer.height(playerHeight);
      return this.$videoPlayer.find('.resizer').css({
        top: Math.round(playerHeight / 3),
        left: aWidth
      });
    } else {
      this.playerWidth = this.$videoPlayer.outerWidth();
      aWidth = this.playerWidth * this.splitRatio[0];
      bWidth = this.playerWidth * this.splitRatio[1];
      aHeight = aWidth * this.aRatio;
      bHeight = bWidth * this.bRatio;
      playerHeight = Math.max(aHeight, bHeight) + this.controlsHeight;
      this.$videoPlayer.find('.a').width(aWidth);
      this.$videoPlayer.find('.a').height(aHeight);
      this.$videoPlayer.find('.b').width(bWidth);
      this.$videoPlayer.find('.b').height(bHeight);
      this.$videoPlayer.height(playerHeight);
      return this.$videoPlayer.find('.resizer').css({
        top: Math.round(playerHeight / 3),
        left: aWidth
      });
    }
  };

  UserInterface.prototype.resizeSingleStreamPlayerHard = function(aWidth) {
    var aHeight, playerHeight;
    aHeight = aWidth * this.aRatio;
    playerHeight = aHeight + this.controlsHeight;
    if (aWidth > 0) {
      this.$videoPlayer.find('.a').width(aWidth);
    }
    if (aHeight > 0) {
      this.$videoPlayer.find('.a').height(aHeight);
    }
    if (playerHeight > 0) {
      return this.$videoPlayer.height(playerHeight);
    }
  };

  UserInterface.prototype.resizeVideo = function(event) {
    var delta, newSplitRatio;
    delta = this.lastPageX - event.pageX;
    this.lastPageX = event.pageX;
    newSplitRatio = this.splitRatio[0] - delta / this.playerWidth;
    if (newSplitRatio < this.minVideoWidth || newSplitRatio > 1 - this.minVideoWidth) {
      return;
    }
    this.splitRatio[0] = newSplitRatio;
    this.splitRatio[1] = 1 - this.splitRatio[0];
    return this.resizePlayer(true);
  };

  UserInterface.prototype.checkFullscreenChange = function() {
    this.resizePlayer(true);
    if (this.$playerWidth !== this.fullscreenPlayerWidth) {
      return setTimeout(((function(_this) {
        return function() {
          return _this.checkFullscreenChange();
        };
      })(this)), 50);
    }
  };

  return UserInterface;

})();

//# sourceMappingURL=user_interface.js.js.map
